\documentclass[12pt]{article}

%\usepackage{times}
\usepackage{hyperref}
\hypersetup{pdfpagemode=UseNone} % don't show bookmarks on initial view
\hypersetup{colorlinks, urlcolor={blue}}

% revise margins
\setlength{\headheight}{0.0in}
\setlength{\topmargin}{0.0in}
\setlength{\headsep}{0.0in}
\setlength{\textheight}{8.65in}
\setlength{\footskip}{0.35in}
\setlength{\oddsidemargin}{0.0in}
\setlength{\evensidemargin}{0.0in}
\setlength{\textwidth}{6.5in}

\setlength{\parskip}{6pt}
\setlength{\parindent}{0pt}

\begin{document}

%\sffamily
{\textbf{Gestational Age Prediction Using Stochastic Intervention for Variable Importance}}

%\href{http://kbroman.org}{Karl W Broman}
Alejandra Benitez and the Preterm Birth Initiative

%This is a portion of the ``\href{http://www.rqtl.org/rqtltour2.pdf}{A shorter tour of R/qtl}''
%tutorial, developed here in multiple formats to illustrate the use of knitr.
%This particular document is written with \href{http://www.latex-project.org}{LaTeX}.

<<knitr_options, include=FALSE>>=
library(knitr)
library(here)
library(dplyr)
library(geepack)
library(parsedate)
library(ggplot2)


devtools::install_github("tlverse/tmle3shift", dependencies = T)
devtools::install_github('nhejazi/haldensify')
devtools::install_github("tlverse/tmle3", dependencies = T)

devtools::install_github("tlverse/sl3", dependencies = T)

#usethis::browse_github_pat()
#usethis::edit_r_environ()
##sl 3 dependencies w tmle3shift
#devtools::install_github('tlverse/sl3', dependencies = T)
##tx shift pins to version of sl3

#devtools::install_github('osofr/condensier', build_vignettes = FALSE)
#devtools::install_github('osofr/simcausal', build_vignettes = FALSE)
library(tidyverse)
library(data.table)
library(condensier)
library(ranger)
library(sl3)
library(tmle3)
library(tmle3shift)

opts_chunk$set(fig.width=12, fig.height=4, fig.path='RnwFigs/',
warning=FALSE, message=FALSE, tidy=FALSE)
options(width=60)
set.seed(53079239)
# install R/qtl package if necessary:
if(!require("qtl")) install.packages("qtl", repos="http://cran.us.r-project.org")
@

\bigskip
%\sffamily 
\textbf{Abstract}
\newline
%\nopagebreak

\textit{Results}

Our preliminary results indicate good classification potential across thresholds (cvAUC 0.75-0.85) while maintaining good specificity. The results also indicate potential to estimate GA at delivery within 3 weeks. A variable importance assessment is forthcoming.

\textit{Conclusions}

Our preliminary data implies our algorithm could guide GA assessment for our primary outcome analysis in Rwanda. Additionally, it has future potential as a pilot in clinical use, as a means for aiding decision-making in treatment and referral for vulnerable newborns. 


\section{Results}
\begin{itemize}
\item Table 1 for population, age, SES, region
\item cvAUC, variable importance can be presented by some dot plot
\item linear plot of predicted continuous GA vs actual to show margins of error
\\

\end{itemize}
%
%\textbf{Results}
%
You then load the R/qtl package using the {\tt library} function:

%<<load_qtl>>=
%library(qtl)
%@


<<load_data, echo=TRUE>>=
## marginal probability of weeks

df = read.csv(here('data', "MatCohort_USadded_30Oct19_BP.csv"))
df[df == "#NULL!" | df == " " | df == ""] <- NA
id_arm = read.csv(here('data', 'RW_Study_ID.csv'))

##split into arms
@


<<echo=FALSE, cache=FALSE>>=
source(here('code', "rw_consort_functions.R"))
source(here('code', "ga_pred", "functions.R"))
@


<<inclusion_criteria, echo = F>>=
A1 = c(333, 436, 544, 120, 110, 545, 111, 224, 221)
A2 = c(435, 331, 541, 115, 113, 539, 226, 329, 332)

A3 = c(330, 438, 540, 117, 116, 542, 112, 328, 223)
A4 = c(437, 327, 543, 114, 119, 334, 118, 222, 225)

arm1 = df %>% filter(dhc %in% A1)
arm2 = df %>% filter(dhc %in% A2)
arm3 = df %>% filter(dhc %in% A3)
arm4 = df %>% filter(dhc %in% A4)


new = arm2 %>% select(obhx_preterm, obhx_lbw, obhx_abortion, obhx_sb, obhx_28d_death)
summary(new)

@



<<get_valid_women>>=

# df2 = get_elig(arm2, "elig_enroll")
# df4 = get_elig(arm4, "elig_enroll")

df2 = get_elig(arm2, "analysis")
df4 = get_elig(arm4, "analysis")

df1 = get_elig(arm1, "analysis")
df3 = get_elig(arm3, "analysis")

@



<<ULTRASOUND, echo = F>>=

# sum(us2$ga_anc1_recorded < 20, na.rm=T) + sum(us4$ga_anc1_recorded < 20, na.rm = T)
# sum(us2$ga_at_us < 20, na.rm = T) + sum(us4$ga_at_us < 20, na.rm = T)

#us_2 = get_us(df2, 2) 
#us_4 = get_us(df4, 4)
summary(df2$ubudehe_cat)

df1us = get_us(df1, 1)
df3us = get_us(df3, 3)

df2us = get_us(df2, 2)
df4us = get_us(df4, 4)

df2us_ga = df2us %>% filter(ga_at_us >= 6 & ga_at_us <= 22)
df4us_ga = df4us %>% filter(ga_at_us >= 6 & ga_at_us <= 22)

df1_ga = df1us %>% filter(back_calc_dod_ga_recorded >= 6 & back_calc_dod_ga_recorded <= 22)
df3_ga = df3us %>% filter(back_calc_dod_ga_recorded >= 6 & back_calc_dod_ga_recorded <= 22)

## for actual SL, make_data needs to filter out any facilities w <11 obs, check dates and completion of data
## currently this is not implemented for larger summary of sample
train = make_data(df2us_ga, df4us_ga, "binomial", wk_thresh = 22, 2)

#train = train %>% filter(ga_at_us >= 6)
summary(train$ga_at_us)
#traing = make_data(us_2, us_4, "gaussian", wk_thresh = 20)
train$Arm = ifelse(train$dhc %in% A2, "US_stANC", "US_gANC")

@


<<hal_densifiy, echo = F>>=

hal_dens <- Lrnr_haldensify$new(
   grid_type = "equal_mass",
   n_bins = 5
 )

hse_learner <- make_learner(Lrnr_density_semiparametric,
  mean_learner = make_learner(Lrnr_glm)
)

mvd_learner <- make_learner(Lrnr_density_semiparametric,
  mean_learner = make_learner(Lrnr_glm),
  var_learner = make_learner(Lrnr_glm)
)

## gcomp for data adaptive parameter and look at variable importance relative to data adaptive truth; 
## try to estimate Q AND G* IF g* is estimated data using data adaptive truth, 
# semi parametric against data adaptive truth
@

<<make_plots, echo = F >>=


plot_data = subset(train, select = c(Arm, dhc, mother_age_cat, ga_del_by_us_date, ga_del_by_us_edd, 
ga_at_deliv_lmp, ga_weeks_recorded, m_age_enroll))
plot_data = plot_data[complete.cases(plot_data), ]
#summary(plot_data$ga_del_by_us_date)
#summary(plot_data$ga_weeks_recorded)
plot_data$ga_weeks_cts = plot_data$ga_weeks_recorded + rnorm(nrow(plot_data), 0, 0.15) 
summary(plot_data$ga_weeks_cts)

gaPlot <- ggplot(plot_data, aes(ga_weeks_cts, ga_del_by_us_date, colour = Arm)) +
stat_smooth(aes(group=1),method="lm", se=TRUE, linetype="dashed", size = 0.5) + geom_point(size = 1.5, alpha = 0.3)  + 
geom_abline(slope = 1, intercept = 0, linetype = "dashed", size = 0.2, alpha = 0.5)
# + geom_jitter(height = 0.1, width = 0.1, alpha = 0.3)

gaPlot + ggtitle(sprintf("Gestational Age at Delivery, N = %s", nrow(plot_data))) + 
labs(x = "Recorded in Maternity Register (wks)", y="By US Date (wks)")
lm(formula = ga_del_by_us_date ~ ga_weeks_cts, plot_data)

#IrisPlot
sqrt(mean((plot_data$ga_del_by_us_date  - plot_data$ga_weeks_cts)^2))
us_date = plot_data$ga_del_by_us_date < 37
recorded = plot_data$ga_weeks_cts < 37

mean(recorded[us_date< 37])

#p_Nobs =  ggplot(plot_data, aes(Arm, N))
#p_Nobs + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)

@

<<SuperLearner, echo  = F>>=
lib.g = list( "SL.xgboost", "SL.ranger", "SL.glmnet", "SL.bartMachine")
lib.b = list( "SL.xgboost", "SL.randomForest", "SL.ranger", "SL.glmnet", "SL.bartMachine2")

#train$y = as.numeric(train$ga_del_by_us_date < 37)
train$y = as.numeric(train$ga_del_by_us_date)

train$m_del = as.factor(format(train$date_del, "%m"))
train$m_age_cat = as.factor(train$mother_age_cat)
X = make_x(train)
summary(X)

library(SuperLearner)
start_time = Sys.time()
#gaussian model
out_all = CV.SuperLearner(Y = train$y, X = X, family = gaussian(), 
cvControl = list(V = 5, shuffle = T, validRows = NULL),
innerCvControl = list(list(V = 5)),
method = "method.NNLS", SL.library = lib.g)

out_binom = CV.SuperLearner(Y = as.numeric(train$y < 37), X = X, family = binomial(), 
cvControl = list(V = 5, shuffle = T, validRows = NULL, stratifyCV = T),
innerCvControl = list(list(V = 5)),
method = "method.NNloglik", SL.library = lib.b)


out_recorded = CV.SuperLearner(Y = as.numeric(plot_data$ga_del_by_us_date), 
X = data.frame(plot_data$ga_weeks_recorded, plot_data$dhc), 
family = gaussian(), 
cvControl = list(V = 5, shuffle = T, validRows = NULL),
innerCvControl = list(list(V = 5)),
method = "method.NNLS", SL.library = lib.g)
out_recorded_binom = CV.SuperLearner(Y = as.numeric(plot_data$ga_del_by_us_date < 37), 
X = data.frame(plot_data$ga_weeks_recorded, plot_data$dhc), 
family = binomial(), 
cvControl = list(V = 5, shuffle = T, validRows = NULL, stratifyCV = T),
innerCvControl = list(list(V = 5)),
method = "method.NNloglik", SL.library = lib.b)

get_auc(out_binom, data.frame(y = as.numeric(train$y < 37)), 5, "ML Algorithm for Predicting Preterm Birth", type = "sens")
get_auc(out_recorded_binom, data.frame(y = as.numeric(plot_data$ga_del_by_us_date < 37)), 5, "Register-Recorded GA for Predicting Preterm Birth", type = "sens")

get_auc(out_binom, data.frame(y = as.numeric(train$y < 37)), folds = 5, type = "sens",  name= "")

get_auc(out_recorded_binom, data.frame(y = as.numeric(plot_data$ga_del_by_us_date < 37)), 
type = "sens",
folds = 5, name= "")

@

<<plot_gaussian, echo = F>>=
plot_data = subset(train, select = c(Arm, dhc, mother_age_cat, ga_del_by_us_date, ga_del_by_us_edd, 
ga_at_deliv_lmp, ga_weeks_recorded, m_age_enroll))
plot_data = plot_data[complete.cases(plot_data), ]
gaus_perf(out_recorded, data.frame(y = as.numeric(plot_data$ga_del_by_us_date)))

##############
#plot_data = plot_data[complete.cases(plot_data),]
plot_data$predicted_recorded = out_recorded$SL.predict

#((1-.148)/.148)/((1-.225)/.225)


gaPlot <- ggplot(plot_data, aes(predicted_recorded, ga_del_by_us_date, colour = Arm)) +
stat_smooth(aes(group=1),method="lm", se=TRUE, linetype="dashed", size = 0.5) + geom_point(size = 1.5, alpha = 0.3)  + 
geom_abline(slope = 1, intercept = 0, linetype = "dashed", size = 0.2, alpha = 0.5)
gaPlot + ggtitle(sprintf("Gestational Age at Delivery Predicted by Recorded Register GA, N = %s", nrow(plot_data))) +  labs(x = "Predicted by Recorded Register GA (wks)", y="By US Date (wks)")
summary(lm(formula = ga_del_by_us_date ~ predicted_recorded, plot_data))


plot_data = subset(train, select = c(Arm, dhc, mother_age_cat, ga_del_by_us_date, ga_del_by_us_edd, ga_at_deliv_lmp, ga_weeks_recorded, m_age_enroll))

plot_data$predicted_all= out_all$SL.predict

gaus_perf(out_all, train)


gaPlot <- ggplot(plot_data, aes(predicted_all, ga_del_by_us_date, colour = Arm)) +
stat_smooth(aes(group=1),method="lm", se=TRUE, linetype="dashed", size = 0.5) + geom_point(size = 1.5, alpha = 0.3)  + 
geom_abline(slope = 1, intercept = 0, linetype = "dashed", size = 0.2, alpha = 0.5)
gaPlot + ggtitle(sprintf("Gestational Age at Delivery Predicted by ML Algorithm, N = %s", nrow(plot_data))) +  labs(x = "Predicted by ML (wks)", y="By US Date (wks)")
summary(lm(formula = ga_del_by_us_date ~ predicted_all, plot_data))


######

@


\bigskip
{\sffamily \textbf{R and package versions used}}
\nopagebreak




<<sessionInfo, include=TRUE, echo=TRUE, results='markup'>>=
sessionInfo()
@

% \bibliography{ga_pred} 
% \bibliographystyle{ieeetr}

\end{document}
