\documentclass[12pt]{article}

%\usepackage{times}
\usepackage{hyperref}
\hypersetup{pdfpagemode=UseNone} % don't show bookmarks on initial view
\hypersetup{colorlinks, urlcolor={blue}}

% revise margins
\setlength{\headheight}{0.0in}
\setlength{\topmargin}{0.0in}
\setlength{\headsep}{0.0in}
\setlength{\textheight}{8.65in}
\setlength{\footskip}{0.35in}
\setlength{\oddsidemargin}{0.0in}
\setlength{\evensidemargin}{0.0in}
\setlength{\textwidth}{6.5in}

\setlength{\parskip}{6pt}
\setlength{\parindent}{0pt}

\begin{document}

%\sffamily
{\textbf{Gestational Age Prediction Using Stochastic Intervention for Variable Importance}}

%\href{http://kbroman.org}{Karl W Broman}
Alejandra Benitez and the Preterm Birth Initiative

%This is a portion of the ``\href{http://www.rqtl.org/rqtltour2.pdf}{A shorter tour of R/qtl}''
%tutorial, developed here in multiple formats to illustrate the use of knitr.
%This particular document is written with \href{http://www.latex-project.org}{LaTeX}.

<<knitr_options, include=FALSE>>=
library(knitr)
library(here)
library(dplyr)
library(geepack)
library(parsedate)
opts_chunk$set(fig.width=12, fig.height=4, fig.path='RnwFigs/',
warning=FALSE, message=FALSE, tidy=FALSE)
options(width=60)
set.seed(53079239)
# install R/qtl package if necessary:
if(!require("qtl")) install.packages("qtl", repos="http://cran.us.r-project.org")
@

\bigskip
%\sffamily 
\textbf{Abstract}
\newline
%\nopagebreak

\textit{Results}

Our preliminary results indicate good classification potential across thresholds (cvAUC 0.75-0.85) while maintaining good specificity. The results also indicate potential to estimate GA at delivery within 3 weeks. A variable importance assessment is forthcoming.

\textit{Conclusions}

Our preliminary data implies our algorithm could guide GA assessment for our primary outcome analysis in Rwanda. Additionally, it has future potential as a pilot in clinical use, as a means for aiding decision-making in treatment and referral for vulnerable newborns. 


\section{Results}
\begin{itemize}
\item Table 1 for population, age, SES, region
\item cvAUC, variable importance can be presented by some dot plot
\item linear plot of predicted continuous GA vs actual to show margins of error
\\

\end{itemize}
%
%\textbf{Results}
%
You then load the R/qtl package using the {\tt library} function:

%<<load_qtl>>=
%library(qtl)
%@



<<echo=FALSE, cache=FALSE>>=
source(here('code', "rw_consort_functions.R"))
source(here('code', "ga_pred", "functions.R"))
@

<<load_data, echo=TRUE>>=
## marginal probability of weeks
df = read.csv(here('data', 'ARMS1_2__3Corrected_4FinalAnalysisV4ConsentedLabelledRecodedOutliersMATERNALFACILITY18Sep2019.csv'))
df = read.csv(here('data', 'ARMS1_2__3Corrected_4FinalAnalysisV4ConsentedLabelledRecodedOutliersMATERNALFACILITY16Sep2019.csv'))

#df = read.csv(here('data', 'FinalAnalysisV4ConsentedLabelledRecodedOutliers28July2019.csv'))
df = read.csv(here('data', 'ARMS1_2__3Corrected_4FinalAnalysisV4ConsentedLabelledRecodedOutliersMATERNALFACILITY24Sep2019WMatWtFU.csv'))

df = read.csv(here('data', "MatCohort_USadded_30Oct19_BP.csv"))
df[df == "#NULL!" | df == " " | df == ""] <- NA
id_arm = read.csv(here('data', 'RW_Study_ID.csv'))


## make quads 


pair1 = c(1, 10, 8, 3, 13, 4, 2, 17, 5)
pair2 = c(9, 11, 14, 16, 6, 15, 12, 18, 7)
p2 = rep(NA, 18)
p2[pair1] = pair2
p2[pair2] = pair1

df$Pair_US = p2[df$Pair]

quad = strsplit(paste(df$Pair, df$Pair_US), " ")
quad = paste(lapply(quad, function(j) sort(as.numeric(j))))
df$quad = quad

df$Pair_USUPT = paste(df$quad, df$StudyGrp)


## make quads
# & sb_birth == 3
#& (sb_birth == 3 | is.na(sb_birth))
eligible_only = df %>% filter(eligible == 1 )
eligible = df %>% filter(eligible == 1 & deliveredbyMarch_31_2019 )
analys = eligible %>% filter(!is.na(ga_weeks))
summary(analys$bwt_birth)
analysis = eligible %>% filter(!is.na(validgestatdel))
den = density(analys$bwt_birth[!is.na(analys$bwt_birth) & analys$bwt_birth <= 5000], n = 500)
plot(den)
#analysis = analysis %>% filter(sb_birth != 1 & sb_birth !=2 )
table(eligible_only$StudyGrp)
table(analysis$StudyGrp)

arm1 = df %>% filter(StudyArm == 1)
arm2 = df %>% filter(StudyArm == 2)
summary(!is.na(arm2$anc1date_anc))
summary(!is.na(arm2$ancrf_anc___1))
summary(arm2$timing_us)
summary(!is.na(arm1$anc1date_anc))
summary(!is.na(arm1$ancrf_anc___1))
##split into arms
@

<<inclusion_criteria, echo = F>>=
A1 = c(333, 436, 544, 120, 110, 545, 111, 224, 221)
A2 = c(435, 331, 541, 115, 113, 539, 226, 329, 332)

A3 = c(330, 438, 540, 117, 116, 542, 112, 328, 223)
A4 = c(437, 327, 543, 114, 119, 334, 118, 222, 225)

@


<<by_pair, echo = F>>=
  make_analysis_data = function(df, usupt) {

      arm1 = df %>% filter(dhc %in% A1 | dhc %in% A3)
      arm2 = df %>% filter(dhc %in% A2 | dhc %in% A4)
      
      df_all = data.frame(rbind(arm1, arm2))


      df_all$id = as.numeric(df_all$dhc)
      df_all$weight = 1/nrow(df_all)
      
      df_all$Y = df_all$validgestatdel
      df_all$anc1ga_anc
      table(df_all$NumberANCs)
      df_all$at_least_4 = df_all$NumberANCs >= 4
      df_all$at_least_3 = df_all$NumberANCs >= 3
      df_all$ga_lt_16 = df_all$anc1ga_anc <= 16
      table(df_all$ga_lt_16)
      
      if (usupt) {
        df_all$A <- df_all$InUSUPTarm
        df_all$Pair = df_all$Pair_USUPT
        
      } else {
        df_all$A <- df_all$StudyGrp
      }
      data = subset(df_all, select = c(validgestatdel, at_least_4, ga_lt_16, at_least_3, anc1ga_anc, 
                                   weight, A, id, Pair, Pair_USUPT, quad, InUSUPTarm, StudyGrp, StudyArm))
      table(data$A, data$Pair)
      return(data)
    
  }

  summary_by_arm = function(df) {
    
    out = lapply(split(df, df$A), function(j) sapply(j[, 2:5], get_n))
    out
  
  }
  
  library(openxlsx)
  
  eligible_studygrp = make_analysis_data(eligible_only, usupt = F)
  analysis_studygrp = make_analysis_data(analysis, usupt = F)
  
  eligible_study = summary_by_arm(eligible_studygrp)
  analysis_study = summary_by_arm(analysis_studygrp)
  
  out_study = c(eligible_study, analysis_study)
  write.xlsx(out_study, file = "summaries_table6_by_arm.xlsx")

  eligible_usupt = make_analysis_data(eligible_only, usupt = T)
  analysis_usupt = make_analysis_data(analysis, usupt = T)

  out_usupt = c(summary_by_arm(eligible_usupt), summary_by_arm(analysis_usupt))
  write.xlsx(out_usupt, file = "summaries_table7_by_arm.xlsx")
  #df_all$Yxwt = df_all$Y * df_all$weight
 
  #X = aggregate(x = data, by = list(id = data$id), FUN = mean)
  #Xwt = aggregate(x = data, by = list(id = data$id), FUN = sum)
  #X$volume = table(df_all$id)
  #X$weight_clust = Xwt$weight * 20
  #X$Ysum = Xwt$Y
  #X$Y_weight = X$Ysum * X$weight_clust
  #by_pair = split(X, X$Pair)
  lapply(split(analysis_studygrp, analysis_studygrp$Pair_USUPT), function(j) table(j$id))


@


<<do_gee, echo = F>>=
  do_gee = function(df_all, filename) {
    
    data = df_all


  #data = subset(df_all, select = c(Y, A, id, Pair))
  #data$U = 1

  library(broom)
  library(geepack)
  gee.fit1 <- geese(formula(at_least_4 ~ A + Pair), id= id, data= data[order(data$id),], 
                  family = binomial(link ="logit"), corstr="exch")
  gee.fit2 <- geese(formula(ga_lt_16 ~ A + Pair), id= id, data= data[order(data$id),], 
                    family = binomial(link ="logit"), corstr="exch")
  gee.fit3 <- geese(formula(at_least_3 ~ A + Pair), id= id, data= data[order(data$id),], 
                    family = binomial(link ="logit"), corstr="exch")
  gee.fit4 <- geese(formula(anc1ga_anc ~ A + Pair), id= id, data= data[order(data$id),], 
                    family = gaussian(link ="identity"), corstr="exch")
  #save(gee.fit4, file = "gee_ga_at_anc1.RData")
  write.csv(summary(gee.fit4)$mean, file = "gee_ga_at_anc1.csv")
  
  out = rbind(  summary(gee.fit1)$mean[2, c(1,2,4)],
                summary(gee.fit2)$mean[2, c(1,2,4)],
                summary(gee.fit3)$mean[2, c(1,2,4)],
                summary(gee.fit4)$mean[2, c(1,2,4)])
  rownames(out) = c("at_least_4anc", "ga_lt_16_anc1", "at_least_3anc", "mean_ga_anc1")
  write.csv(out, file = sprintf("%s.csv", filename), row.names = T)
  out 
  }

do_gee(eligible_studygrp, filename = "eligible_studygrp")
do_gee(eligible_usupt, filename = "eligible_usupt")

do_gee(analysis_studygrp, filename = "analysis_studygrp")
do_gee(analysis_usupt, filename = "analysis_usupt")


#qt(0.975, 9)
gee_out = c((sum(gee.fit_unadj_exch_id$beta)), (gee.fit_unadj_exch_id$beta[1]), gee.fit_unadj_exch_id$beta[2], summ$mean$san.se[2],
  gee.fit_unadj_exch_id$beta[2] - 1.96*summ$mean$san.se[2],
  gee.fit_unadj_exch_id$beta[2] + 1.96*summ$mean$san.se[2],
  summ$mean$p[2])
names(gee_out) = c("Risk1", "Risk0", "RiskDiff", "SE", "CI.lo", "CI.hi", "pval")
gee_out = data.frame(t(gee_out))
xtable(gee_out, digits = 2)

@



<<get_elig_by_study_arm, echo = F>>=
  arm1 = df %>% filter(dhc %in% A1 | dhc %in% A2)
  arm2 = df %>% filter(dhc %in% A3 | dhc %in% A4)

  df1_valid = get_elig(arm1, "valid_enroll")
  df2_valid = get_elig(arm2, "valid_enroll")
  
  df1_anc1 = get_elig(arm1, "valid_anc_date")
  df2_anc1 = get_elig(arm2, "valid_anc_date")
  
  df1_elig = get_elig(arm1, "elig_enroll")
  df2_elig = get_elig(arm2, "elig_enroll")
  
  #df1_ga = get_elig(arm1, "valid_anc_ga")
  #df2_ga = get_elig(arm2, "valid_anc_ga")
  df1_elig = arm1 %>% filter(eligible == 1)
  df2_elig = arm2 %>% filter(eligible == 1)
  
  sanc_valid = get_anc_covg(df1_valid)
  ganc_valid = get_anc_covg(df2_valid)
  
  sanc_anc1 = get_anc_covg(df1_anc1)
  ganc_anc1 = get_anc_covg(df2_anc1)
  
  sanc_elig = get_anc_covg(df1_elig)
  ganc_elig = get_anc_covg(df2_elig)
  
  library(openxlsx)
  out = list(sanc_elig, ganc_elig)
  names(out) = c("sanc", "ganc")
  write.xlsx(out, file = sprintf("anc_covg_among_studygrp_elig_%s.xlsx", Sys.Date()), row.names = T)
  #get_anc_covg(df1)

    ### secondary outcomes, unadjusted ###

  
  #risk factor identified during ANC at any time
  names_rf = df[, grep( "ancrf", names(df), value = T)[1:7]]
  rf_anc = names_rf == 1
  summary(rf_anc)

  ### secondary outcomes, unadjusted ###
  
  
@


<<anc_covg_by_us_upt, echo = F>>=
  arm1 = df %>% filter(dhc %in% A1 | dhc %in% A3)
  arm2 = df %>% filter(dhc %in% A2 | dhc %in% A4)

  df1_elig = arm1 %>% filter(eligible == 1)
  df2_elig = arm2 %>% filter(eligible == 1)

  arm1_elig = get_anc_covg(df1_elig)
  arm2_elig = get_anc_covg(df2_elig)

  library(openxlsx)
  out = list(arm1_elig, arm2_elig)
  names(out) = c("yes_us_upt", "no_us_upt")
  write.xlsx(out, file = sprintf("anc_covg_by_us_upt_eligible_%s.xlsx", Sys.Date()), row.names = T)
  
  ##test these outcome differences
  
  @


<<anc_covg_by_arm, echo = F>>=
  arm1 = df %>% filter(dhc %in% A1)
  arm2 = df %>% filter(dhc %in% A2)
  arm3 = df %>% filter(dhc %in% A3)
  arm4 = df %>% filter(dhc %in% A4)

  df1_elig = get_elig(arm1, "elig_enroll")
  df2_elig = get_elig(arm2, "elig_enroll")
  df3_elig = get_elig(arm3, "elig_enroll")
  df4_elig = get_elig(arm4, "elig_enroll")
  
  arm1_elig = get_anc_covg(df1_elig)
  arm2_elig = get_anc_covg(df2_elig)
  arm3_elig = get_anc_covg(df3_elig)
  arm4_elig = get_anc_covg(df4_elig)
  
  df1_elig = arm1 %>% filter(eligible == 1)
  df2_elig = arm2 %>% filter(eligible == 1)
  df3_elig = arm3 %>% filter(eligible == 1)
  df4_elig = arm4 %>% filter(eligible == 1)
  sum(nrow(df1_elig), nrow(df2_elig))
  
  arm1_elig = get_anc_covg(df1_elig)
  arm2_elig = get_anc_covg(df2_elig)
  arm3_elig = get_anc_covg(df3_elig)
  arm4_elig = get_anc_covg(df4_elig)
  
  library(openxlsx)
  out = list(arm1_elig, arm2_elig, arm3_elig, arm4_elig)
  names(out) = c("arm1", "arm2", "arm3", "arm4")
  write.xlsx(out, file = sprintf("anc_covg_by_arm_eligible_%s.xlsx", Sys.Date()), row.names = T)
  @


<<make_consort, echo = F>>=
  a1 = get_consort(arm1)
  a2 = get_consort(arm2)
  
  
  a3 = get_consort(arm3)
  a4 = get_consort(arm4)
  library(openxlsx)
  write_out = list(a1, a2, a3, a4)
  names(write_out) = c("arm1", "arm2", "arm3", "arm4")
  write_out = list(a1, a2)
  names(write_out) = c("sANC", "gANC")

  ?write.csv
  openxlsx::write.xlsx(write_out, file = here('consort_by_group.xlsx'), row.names = T)
@
<<consented, echo = F>>=
table(df$Consentgranted)
summary(df)
@

<<get_mean_ci, echo = F>>=
#simga hat squared is SSE divided by n-2
var(yhat) = var(x %*% inv(t(x)%*%x)*t(x) %*% y)
H = x %*% inv(t(x)%*%x)*t(x)
var(yhat) = H %*% (SSE/(n-2)) %*% H
var(yhat) = (SSE/(n-2)) %*% H
@

<<ULTRASOUND, echo = F>>=
  arm1 = df %>% filter(dhc %in% A1)
  arm2 = df %>% filter(dhc %in% A2)
  arm3 = df %>% filter(dhc %in% A3)
  arm4 = df %>% filter(dhc %in% A4)
  
  df1 = get_elig(arm2, "analysis")
  df2 = get_elig(arm4, "analysis")
  
  df1us = get_us_rates(df1)
  df2us = get_us_rates(df2)
  
  #train = make_data(df1us, df2us, "binomial", wk_thresh = 20)
  out2 = output_ptb_rate(df1us)
  out4 = output_ptb_rate(df2us)
  
  library(openxlsx)
  out = list(out2, out4)
  names(out) = c("arm2", "arm4")
  write.xlsx(out, file = sprintf("us_among_elig_primary_analysis_%s.xlsx", Sys.Date()), row.names = T)
  


#get_ga_us(df_16)
get_ga_us(df_24)
@

<<get_nancy_number, echo = F>>=
library(dplyr)
df1 = arm1 %>% filter(arm1$eligible == 1 & arm1$deliveredbyMarch_31_2019 == 1)
dim(df1)
df1 = df1 %>% filter(!is.na(validgestatdel))

df2 = arm2 %>% filter(arm2$eligible == 1 & arm2$deliveredbyMarch_31_2019 == 1)
df2 = df2 %>% filter(!is.na(validgestatdel))
nrow(df2) + nrow(df1)

@

\bigskip
{\sffamily \textbf{R and package versions used}}
\nopagebreak




<<sessionInfo, include=TRUE, echo=TRUE, results='markup'>>=
sessionInfo()
@

% \bibliography{ga_pred} 
% \bibliographystyle{ieeetr}

\end{document}
