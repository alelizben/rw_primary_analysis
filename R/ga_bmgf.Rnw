\documentclass[12pt]{article}

%\usepackage{times}
\usepackage{hyperref}
\hypersetup{pdfpagemode=UseNone} % don't show bookmarks on initial view
\hypersetup{colorlinks, urlcolor={blue}}

% revise margins
\setlength{\headheight}{0.0in}
\setlength{\topmargin}{0.0in}
\setlength{\headsep}{0.0in}
\setlength{\textheight}{8.65in}
\setlength{\footskip}{0.35in}
\setlength{\oddsidemargin}{0.0in}
\setlength{\evensidemargin}{0.0in}
\setlength{\textwidth}{6.5in}

\setlength{\parskip}{6pt}
\setlength{\parindent}{0pt}

\begin{document}

%\sffamily
{\textbf{Gestational Age Prediction Using Stochastic Intervention for Variable Importance}}

%\href{http://kbroman.org}{Karl W Broman}
Alejandra Benitez and the Preterm Birth Initiative

%This is a portion of the ``\href{http://www.rqtl.org/rqtltour2.pdf}{A shorter tour of R/qtl}''
%tutorial, developed here in multiple formats to illustrate the use of knitr.
%This particular document is written with \href{http://www.latex-project.org}{LaTeX}.

<<knitr_options, include=FALSE>>=
  library(knitr)
  library(here)
  library(dplyr)
  library(geepack)
  library(parsedate)
  library(ggplot2)
  library(openxlsx)
opts_chunk$set(fig.width=12, fig.height=4, fig.path='RnwFigs/',
warning=FALSE, message=FALSE, tidy=FALSE)
options(width=60)
set.seed(53079239)
# install R/qtl package if necessary:
if(!require("qtl")) install.packages("qtl", repos="http://cran.us.r-project.org")
@



<<load_data, echo=TRUE>>=
## marginal probability of weeks
df = read.csv(here('data', "MatCohort_USadded_30Oct19_BP.csv"))
df[df == "#NULL!" | df == " " | df == ""] <- NA
id_arm = read.csv(here('data', 'RW_Study_ID.csv'))


##split into arms
@


<<echo=FALSE, cache=FALSE>>=
source(here('R', "rw_consort_functions.R"))
source(here('ga_pred_files', "functions.R"))
@


<<inclusion_criteria, echo = F>>=
A1 = c(333, 436, 544, 120, 110, 545, 111, 224, 221)
A2 = c(435, 331, 541, 115, 113, 539, 226, 329, 332)

A3 = c(330, 438, 540, 117, 116, 542, 112, 328, 223)
A4 = c(437, 327, 543, 114, 119, 334, 118, 222, 225)

arm1 = df %>% filter(dhc %in% A1)
arm2 = df %>% filter(dhc %in% A2)
arm3 = df %>% filter(dhc %in% A3)
arm4 = df %>% filter(dhc %in% A4)


@



<<get_us_table_7, echo = F>>=
  #eligible_only = df %>% filter(eligible == 1 )
  eligible = df %>% filter(eligible == 1 & deliveredbyMarch_31_2019 )
  #eligible = df %>% filter(delivered == 1); analysis = eligible
  analysis = eligible %>% filter(!is.na(validgestatdel))

  #df2us = get_us(arm2, 2)
  arm1 = analysis %>% filter(dhc %in% A1)
  arm2 = analysis %>% filter(dhc %in% A2)
  arm3 = analysis %>% filter(dhc %in% A3)
  arm4 = analysis %>% filter(dhc %in% A4)
  
  no_us = get_us(rbind(arm1, arm3), 1)
  us_arm = get_us(rbind(arm2, arm4), 4)
  
  all_arms = rbind(no_us, us_arm)
  # %>% filter(ga_at_us >= 6 & ga_at_us <= 22)
  
  by_study_grp = lapply(split(all_arms, all_arms$StudyGrp), 
                        function(j) j %>% filter(ga_at_us >= 6 & ga_at_us <= 22))
  by_arm = lapply(split(us_arm, us_arm$StudyArm), 
                  function(j) j %>% filter(ga_at_us >= 6 & ga_at_us <= 22))

  get_us_stats = function(df) {
    
    df$weight[df$weight == 33] <- 3300
    df$weight[df$weight == 34] <- 3400
    df$weight[df$weight == 35] <- 3500
    df$weight[df$weight == 36] <- 3600
    df$weight[df$weight == 50] <- 5000
    df$weight[df$weight == 300] <- 3000
    out = c()
    out$validgestatdel = df$val_ga < 37
    out$recorded_register = df$recorded < 37
    out$ga_at_birth_by_ga_anc1 = df$ga_at_delivery_by_ga_anc1 < 37
    out$ga_at_deliv_lmp = df$ga_at_deliv_lmp < 37
 
    
    out$ptb_by_bwt_or_wks = df$validgestatdel < 37 | df$weight < 2500
    out$low_bwt_only = df$weight < 2500

    out$ptb_by_early_us = ifelse(!is.na(df$ga_del_by_us_date) & df$ga_at_us >=6 & df$ga_at_us <= 22,
                                 df$ga_del_by_us_date < 37, NA)

    out = lapply(out, get_n)
    out = do.call(rbind, out)
    out
  }
  us_only = get_us_stats(us_arm %>% filter(ga_at_us <= 22))
  colnames(us_only) <- "ptb rate"
  
  all = get_us_stats(all_arms)
  colnames(all) <- "ptb rate"
  #t2 = output_ptb_rate(all_arms)
  us_and_all = list(us_only, all)

  names(us_and_all) = c('us_only', "all")
  
  study_grp_res = do.call(cbind, lapply(by_study_grp, get_us_stats))
  by_arm_res = do.call(cbind, lapply(by_arm, get_us_stats))
  #write.csv( by_arm_res, file = sprintf("us_table1_supplement_%s.csv", Sys.Date()))
  #write.xlsx(us_and_all, file = sprintf("us_and_all_ptb_rates_%s.xlsx", Sys.Date()), row.names = T)
@

<<ULTRASOUND, echo = F>>=
  
  eligible = df %>% filter(eligible == 1 & deliveredbyMarch_31_2019 )
  #eligible = df %>% filter(delivered == 1); analysis = eligible
  analysis = eligible %>% filter(!is.na(validgestatdel))
  
  arm1 = analysis %>% filter(dhc %in% A1)
  arm2 = analysis %>% filter(dhc %in% A2)
  arm3 = analysis %>% filter(dhc %in% A3)
  arm4 = analysis %>% filter(dhc %in% A4)
 
  df2 = get_elig(arm2, "elig_enroll")
  df4 = get_elig(arm4, "elig_enroll")
  df1 = get_elig(arm1, "elig_enroll")
  df3 = get_elig(arm3, "elig_enroll")
  
  df1us = get_us(df1, 1)
  df2us = get_us(df2, 2)
  df3us = get_us(df3, 3)
  df4us = get_us(df4, 4)

  df1_ga = df1us %>% filter(back_calc_dod_ga_recorded >= 6 & back_calc_dod_ga_recorded <= 22)
  df3_ga = df3us %>% filter(back_calc_dod_ga_recorded >= 6 & back_calc_dod_ga_recorded <= 22)
  
  df2_ga = df2us %>% filter(ga_at_us >= 6 & ga_at_us <= 22)
  df4_ga = df4us %>% filter(ga_at_us >= 6 & ga_at_us <= 22)
  
  ## for actual SL, make_data needs to filter out any facilities w <11 obs, check dates and completion of data
  ## currently this is not implemented for larger summary of sample
  train = make_data(df2_ga, df4_ga, "binomial", wk_thresh = 22, 2)
  
  eligible_studygrp = make_analysis_data(train, usupt = F)
  
  fix_weight = function(df) {
    
    df$weight[df$weight == 33] <- 3300
    df$weight[df$weight == 34] <- 3400
    df$weight[df$weight == 35] <- 3500
    df$weight[df$weight == 36] <- 3600
    df$weight[df$weight == 50] <- 5000
    df$weight[df$weight == 300] <- 3000
    out = c()
    
    df$ptb_by_early_us = ifelse(!is.na(df$ga_del_by_us_date),
                                 df$ga_del_by_us_date < 37, NA)
    df$ga_del_by_us_date = as.numeric(df$ga_del_by_us_date)
    df$lbw = ifelse(!is.na(df$weight),
                                 df$weight < 2500, NA)
    df
  }
  out = fix_weight(eligible_studygrp)
  out = out %>% filter(Pair != 2 & Pair != 4)


@



<<test_using_gee, echo = F>>=

  do_gee = function(df) {

    gee.fit1 <- geese(formula(ga_del_by_us_date ~ A + Pair), id= id, data= df[order(df$id),], 
                  family = gaussian(link ="identity"), corstr="exch")
    gee.fit2 <- geese(formula(ptb_by_early_us ~ A + Pair), id= id, data= df[order(df$id),], 
                    family = binomial(link ="logit"), corstr="exch")
    gee.fit3 <- geese(formula(lbw ~ A + Pair), id= id, data= df[order(df$id),], 
                    family = binomial(link ="logit"), corstr="exch")

    list(summary(gee.fit1)$mean[2, c(1,2,4)], summary(gee.fit2)$mean[2, c(1,2,4)], summary(gee.fit3)$mean[2, c(1,2,4)])
  }
  
  do_gee(out)
  
@



<<aggregate_outcomes, echo = F>>=
  ## for 

  aggregate_cluster = function(df) {
    by_arm = split(df, df$A)
    pooled = lapply(by_arm, function(x) c(get_n(x$ga_del_by_us_date), get_n(x$ptb_by_early_us), get_n(x$lbw)))
    agg = aggregate(subset(df, select = c(id, A, ga_del_by_us_date, ptb_by_early_us, lbw)), 
                    by = list(id = df$id), FUN = function(x) mean(x, na.rm = T))
    by_arm = split(agg, agg$A)
    clustered = lapply(by_arm, function(j) apply(subset(j, select = c(ga_del_by_us_date, ptb_by_early_us, lbw)), 2, 
                                            function(x) round(c(mean(x), sd(x)), 4) ) )

           
    clustered[[1]] = rbind(clustered$`0`, pooled$`0`)
    row.names(clustered[[1]]) = c("estimated cluster_adj", "sd cluster adj", "pooled estimate (n)")
    clustered[[2]] = rbind(clustered$`1`, pooled$`1`, sapply(do_gee(df), function(j) round(j$p, 4)))
    row.names(clustered[[2]]) = c("estimated cluster_adj", "sd cluster adj", "pooled estimate (n)", "p-values")

    names(clustered) = c("control", "intervention")
    # aggregate(analysis_study)
    clustered
    
  }
  #write.xlsx(aggregate_cluster(out), row.names = T, file = sprintf("supplemental_table_us_%s.xlsx", Sys.Date()))

@



<<sessionInfo, include=TRUE, echo=TRUE, results='markup'>>=
sessionInfo()
@

% \bibliography{ga_pred} 
% \bibliographystyle{ieeetr}

\end{document}
